

cmake_minimum_required (VERSION 2.6)
project (ppi-server-project)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)


set(INSTALL_CLIENT_PATH /var/local CACHE PATH CLIENT_PATH)
set(INSTALL_CONFIG_PATH /usr/local/etc CACHE PATH CONFIG_PATH)
set(INSTALL_DATABASE_PATH /var/local CACHE PATH DATABASE_PATH)
set(INSTALL_LOGGING_PATH /var/log CACHE PATH LOGGING_PATH)
set(INSTALL_DEFAULTUSER nobody CACHE STRING DEFAULTUSER)

if(INSTALL_CLIENT_PATH)
  string(REGEX MATCH "^." reg ${INSTALL_CLIENT_PATH})
  if(reg STREQUAL "/")
    set(FULL_CLIENT_PATH ${INSTALL_CLIENT_PATH}/ppi-server/client)
  #else(reg STREQUAL "/")
  #  set(FULL_CLIENT_PATH ${CMAKE_SOURCE_DIR}/client)
  endif(reg STREQUAL "/")
endif(INSTALL_CLIENT_PATH)

if(INSTALL_CONFIG_PATH)
  string(REGEX MATCH "^." reg ${INSTALL_CONFIG_PATH})
  if(reg STREQUAL "/")
    set(FULL_CONFIG_PATH ${INSTALL_CONFIG_PATH}/ppi-config)
  #else(reg STREQUAL "/")
  #  set(FULL_CLIENT_PATH ${CMAKE_SOURCE_DIR}/conf)
  endif(reg STREQUAL "/")
endif(INSTALL_CONFIG_PATH)

if(INSTALL_DATABASE_PATH)
  string(REGEX MATCH "^." reg ${INSTALL_DATABASE_PATH})
  if(reg STREQUAL "/")
    set(FULL_DATABASE_PATH ${INSTALL_DATABASE_PATH}/ppi-server/database)
  #else(reg STREQUAL "/")
  #  set(FULL_CLIENT_PATH ${CMAKE_SOURCE_DIR}/data)
  endif(reg STREQUAL "/")
endif(INSTALL_DATABASE_PATH)

if(INSTALL_LOGGING_PATH)
  string(REGEX MATCH "^." reg ${INSTALL_LOGGING_PATH})
  if(reg STREQUAL "/")
    set(FULL_LOGGING_PATH ${INSTALL_LOGGING_PATH}/ppi-server)
  #else(reg STREQUAL "/")
  #  set(FULL_CLIENT_PATH ${CMAKE_SOURCE_DIR}/log)
  endif(reg STREQUAL "/")
endif(INSTALL_LOGGING_PATH)

if(INSTALL_CONFIG_PATH)
  add_definitions(-DPPICLIENTPATH="${FULL_CLIENT_PATH}")
  add_definitions(-DPPICONFIGPATH="${FULL_CONFIG_PATH}")
  add_definitions(-DPPIDATABASEPATH="${FULL_DATABASE_PATH}")
  add_definitions(-DPPILOGPATH="${FULL_LOGGING_PATH}")
endif(INSTALL_CONFIG_PATH)

FIND_LIBRARY(RT_LIBRARIES NAMES rt)
MARK_AS_ADVANCED(RT_LIBRARIES)

SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_MULTITHREAD OFF)
FIND_PACKAGE(Boost REQUIRED)

#option(USE_LircClient "use lirc_client" ON)
if(USE_LircClient)
  find_package(LircClient REQUIRED)
  include_directories(${LircClient_INCLUDE_DIR})
  add_definitions(-D_LIRCCLIENTLIBRARY)
endif(USE_LircClient)

#option(USE_OPENSSL "use openSSL" ON)
if(USE_OPENSSL)
  find_package(OpenSSL REQUIRED)
  include_directories(${OPENSSL_INCLUDE_DIR})
  add_definitions(-D_OPENSSLLIBRARY)
endif(USE_OPENSSL)

option(USE_OWFS "use dallas/maxim semiconductors" OFF)
if(USE_OWFS)
  find_package(OWFS REQUIRED)
  include_directories(${OWFS_INCLUDE_DIR})
  add_definitions(-D_OWFSLIBRARY)
endif(USE_OWFS)

option(USE_K8055 "use Vellemann K8055 ports" OFF)
if(USE_K8055)
  find_package(USB REQUIRED)
  include_directories(${USB_INCLUDE_DIR})
  find_package(K8055 REQUIRED)
  include_directories(${K8055_INCLUDE_DIR})
  add_definitions(-D_K8055LIBRARY)
endif(USE_K8055)

add_subdirectory( src/util )
add_subdirectory( src/server )
add_subdirectory( src/server/libs )
add_subdirectory( src/server/libs/client )
add_subdirectory( src/server/libs/server )
add_subdirectory( src/ports )
add_subdirectory( src/portserver )
add_subdirectory( src/logger/lib )
add_subdirectory( src/database )

add_subdirectory( src/logger )
add_subdirectory( src )

